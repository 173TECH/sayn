#For more information on how to use SAYN, please visit our documentation:
#TO ADD: DOCUMENTATION LINK

##############
#MODELS OVERVIEW
##############
#this file contains the details of the SAYN project -it is shared across all project users
#the models file defines the following:
#sayn_project_name: the name of the project
#default_db: default database used for SQL tasks
#required_credentials: the required credentials to run a SAYN project. Those will need to be defined in the settings' profile(s)
#parameters: those are default (i.e. PROD) parameters for the project (which can be overriden by settings' profile parameters)
#models: any additional model to run for the SAYN project (none is set in this example but see the documentation for more details on this)
#groups: groups enable to define parameters for a group of tasks. Tasks that reference a group will use the group's parameters.
#tasks: the definition of tasks to run

##############
#SAYN PROJECT NAME SECTION
##############
#specifies the SAYN project name
#it is usually good practice to give a meaningful name: e.g. sayn_company-name
sayn_project_name: sayn_chinook

##############
#DEFAULT DATABASE SECTION
##############
#specifies which database should be used as the default database when running SAYN
default_db: warehouse

##############
#REQUIRED CREDENTIALS SECTION
##############
#specifies the list of the required credentials to run the project
#the details of those credentials are specified into the settings.yaml file
required_credentials:
  - warehouse

##############
#PARAMETERS SECTION
##############
#specifies the default values of each parameter used when running SAYN
#those values can be overriden by using profiles in the settings.yaml file
parameters:
  table_prefix: ''
  schema_logs: main #this is specific to SQLite (this should be the database name which is main)
  schema_staging: main #this is specific to SQLite (this should be the database name which is main)
  schema_models: main #this is specific to SQLite (this should be the database name which is main)

##############
#MODELS SECTION
##############
#specifies the additional model files for the project
#additional model files are stored into the models folder and enable you to break your project down in multiple processes
#those additional models can be run individually
#we are not using additional models in this example
#models:

##############
#GROUPS SECTION
##############
#groups enable to define parameters for a group of tasks. Tasks that reference a group will use the group's parameters.
groups:
  modelling:
    type: autosql
    materialisation: table
    to:
      staging_schema: '{{schema_staging}}'
      schema: '{{schema_models}}'
      table: '{{table_prefix}}{{task.name}}'

##############
#TASKS SECTION
##############
#the definition of tasks to run
#there are several task types (please see the documentation for full details)
#in this example, we will cover three task types: sql, autosql and python
#a task definition needs to cover its type and the file name to locate the task. Then, different attributes apply for different tasks.
tasks:
  #this is a sql task
  #a sql task lets you run any sql code.
  #sql tasks automatically locate files into the sql folder, so there is no need to prefix with sql/
  track_details_sql:
    file_name: track_details_sql.sql
    type: sql

  #this is an autosql task
  #autosql are sql tasks which automate the creation of tables and views. Tables can loaded incrementally.
  #with autosql tasks, you only write a select statement and the table will be created based on it.
  #autosql tasks require additional parameters:
  #materialisation: table, view or incremental
  #to:
    #staging_schema: schema that will be used  for creating the temporary tables during process
    #schema: the schema where the final result will be loaded
    #table: tha name of the table where the result will be loaded (note we are using the task name which is accessed via {{task.name}})
  track_details_autosql:
    file_name: track_details_autosql.sql
    type: autosql
    materialisation: table
    to:
      staging_schema: '{{schema_staging}}'
      schema: '{{schema_models}}'
      table: '{{table_prefix}}{{task.name}}'

  #with groups, you can avoid repetition of task parameters.
  #by passing a group to a task, the task will inherit the group's parameters
  #by using the modelling group defined in the group section, this task will be an autosql task and use the other parameters defined in the modelling group
  tracks_per_album:
    file_name: tracks_per_album.sql
    group: modelling

  #this tasks uses the modelling group, however it overwrites the materialisation to be a view
  #it also specifies a parent (parents are specified by referring to the task name in the model file). The DAG will naturally run tasks in order of the parent relationships
  #there can be as many parents as desired
  tracks_per_album_ordered:
    file_name: tracks_per_album_ordered.sql
    group: modelling
    materialisation: view
    parents:
      - tracks_per_album

  #this is a python task
  #for python tasks, you define a module instead of a file name. That module will be imported (therefore do not add the .py extension)
  #sayn searches modules (i.e. files) in the python folder, so there is no need to prefix the module name with python.
  #you also need to define the class to be imported for execution. This class is defined in the python task file.
  print_top_10_albums_by_tracks:
    module: print_top_10_albums_by_tracks
    type: python
    class: TopAlbumsPrinter
    parents:
      - tracks_per_album_ordered
